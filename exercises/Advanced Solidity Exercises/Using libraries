pragma solidity ^0.4.24;

import "github.com/OpenZeppelin/zeppelin-solidity/contracts/math/SafeMath.sol";

contract Bank{
    mapping(address => uint) public accounts;
    using SafeMath for uint256;
     
    function deposit() public payable {
        require (accounts[msg.sender] + msg.value >= msg.value, "Overflow Error");
        accounts[msg.sender] = accounts[msg.sender].add(msg.value);
        }
        
    function withdraw(uint money) public{
        require(money <= accounts[msg.sender]);
        accounts[msg.sender] = accounts[msg.sender].sub(money);
    }
    }
    
 contract SmartExchange{
    event Deposit(address from, bytes32 to, uint indexed value);
    event Transfer(address to, bytes32 from, uint indexed value);
    
    function deposit(bytes32 to) public payable{
        emit Deposit(msg.sender, to, msg.value);
    }
    
    function transfer(address to,bytes32 from, uint value) public payable{
        to.transfer(value);
        emit Transfer(to, from, value);
        
    }
}
