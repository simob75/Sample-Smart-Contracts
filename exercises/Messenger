pragma solidity ^0.4.24;

contract Messenger {
    address owner;
    string[] messages;
    
    constructor() public {
        owner = msg.sender; //this line defines the owner as the person who has deployed the contract
    }
    
    function add(string _message) public {
        require(msg.sender == owner); //this line will prevent anyone who is not the owner of the contract to add messages to the array
        messages.push(_message);
    }
    
    function countMessages() public view returns(uint) {
        return messages.length;
    }
    
    function getMessages(uint _index) view public returns (string) {
        return messages[_index];
    }
    
}

contract SampleContract {
    uint256 public publicNumber = 1; //the compiler automatically creates getter functions for all public state variables
    uint8 private secretNumber = 2;
    
    function getSecret() public view returns(uint8){
        return secretNumber;   
    }
}

contract MessageContract{
    string private message = "Hello World";
    
    function getMessage() public view returns(string) {
        return message;
    }
    
    function setMessage(string _message) public {
        message = _message;
    } 
}


contract ChangeArrayValue{
    uint[20] public arr; //storage variable by default
    
// function arguments are by default memory 
    function startChange() public {
        firstChange(arr); 
        secondChange(arr);
    }
    
    function firstChange(uint[20] storage x) internal {
        x[0] = 4;
    }
    
    function secondChange(uint[20] x) internal pure{
        x[0] = 9;
    }
}
